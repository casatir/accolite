#!/usr/bin/env python

import sys
import os
import accolite

# Usage function
def usage(stream):
    stream.write("Usage: accolite-init [Options] <working dir>\n")
    stream.write("Options:\n")
    stream.write("--help, -h                  : \t This help message.\n")
    stream.write("--config-file, -c <xml file>: \t Give a configuration file for initialize the project.\n")


def main():
    # Preset options
    configfile = ""
    # Get options
    argv = sys.argv[1:]
    while len(argv) > 0 and argv[0].startswith("-"):
        if argv[0] in ["--help","-h"]:
            usage(sys.stdout)
            return 0
        elif argv[0] in ["--config-file","-c"]:
            argv = argv[1:]
            configfile = argv[0]
        else:
            sys.stderr.write("Unknown option " + argv[0] + "!")
            usage(sys.stderr)
            return 1
        # Shift argument
        argv = argv[1:]

    if len(argv) == 0:
        sys.stderr.write("Mandatory argument <working dir> not found.\n")
        usage(sys.stderr)
        return 1

    # Set dirs
    rootdir = argv[0]
    accolitedir = os.path.abspath(os.path.join(rootdir, ".accolite"))
    os.makedirs(accolitedir)
    # Project name
    projectname = os.path.basename(os.path.abspath(rootdir))
    # Put the config file inside .accolite
    if configfile == "":
        configxml = accolite.defaultxml(projectname)
    else:
        configxml = parse(configfile)
    configxmlfile = open(os.path.abspath(os.path.join(accolitedir, "config.xml")), 'w')
    configxml.writexml(configxmlfile)
    configxmlfile.close()

    # Go inside working dir
    os.chdir(rootdir)

    # Creates dirs
    testsdir = accolite.absdir("tests")
    cmakedir = accolite.absdir("cmake")
    os.makedirs(cmakedir)
    os.makedirs(accolite.absdir("src"))
    os.makedirs(testsdir)
    os.makedirs(accolite.absdir("examples"))
    os.makedirs(accolite.absdir("doc"))
    
    # Populating tests dir
    testrunner = open(os.path.abspath(os.path.join(testsdir, "TestRunner.h")), 'w')
    testrunner.write(accolite.testrunnerstring())
    testrunner.close()
    exampletest = open(os.path.abspath(os.path.join(testsdir, "ExampleTest.cpp")), 'w')
    exampletest.write(accolite.examplesstring())
    exampletest.close()

    # Populating cmakedir
    valgrindsupp = open(os.path.abspath(os.path.join(cmakedir, "valgrind.supp")), 'w')
    valgrindsupp.close()
    pathsdefinitions = open(os.path.abspath(os.path.join(cmakedir, "PathsDefinitions.cmake")), 'w')
    pathsdefinitions.write(accolite.pathsdefinitionsstring())
    pathsdefinitions.close()
    exampleslinks = open(os.path.abspath(os.path.join(cmakedir, "ExamplesLinks.cmake")), 'w')
    exampleslinks.close()
    exampleslists = open(os.path.abspath(os.path.join(cmakedir, "CMakeExamplesLists.cmake")), 'w')
    exampleslists.write(accolite.exampleslistsstring())
    exampleslists.close()
    testconfig = open(os.path.abspath(os.path.join(cmakedir, "CTestConfig.cmake")), 'w')
    testconfig.write(accolite.testconfigstring())
    testconfig.close()
    dashboard = open(os.path.abspath(os.path.join(cmakedir, "CTestDashboard.cmake")), 'w')
    dashboard.write(accolite.dashboardstring())
    dashboard.close()
    cmakelists = open(os.path.abspath(os.path.join(cmakedir, "CMakeLists.txt")), 'w')
    cmakelists.write(accolite.cmakelistsstring())
    cmakelists.close()
    testslists = open(os.path.abspath(os.path.join(cmakedir, "CMakeTestsLists.cmake")), 'w')
    testslists.write(accolite.testslistsstring())
    testslists.close()
    testslinks = open(os.path.abspath(os.path.join(cmakedir, "TestsLinks.cmake")), 'w')
    testslinks.close()
    dependencies = open(os.path.abspath(os.path.join(cmakedir, "Dependencies.cmake")), 'w')
    dependencies.close()


if __name__ == '__main__':
    sys.exit(main())
