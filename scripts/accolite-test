#!/usr/bin/env python

import sys
import os.path
import subprocess
import multiprocessing

# Usage function
def usage(stream):
    stream.write("Usage: accolite-test [Options]\n")
    stream.write("Options:\n")
    stream.write("--help, -h               : \t This help message.\n")
    stream.write("--clean-before, -c       : \t Run clean-me first.\n")
    stream.write("--exclude-tests, -e <exp>: \t Exclude all tests whose names matchs regular expression <exp>.\n")
    stream.write("--only-test, -o <exp>    : \t Execute only tests whose names matchs regular expression <exp>.\n")

# Get working project dir
def workingdir():
    prevpath = ""
    currentpath = os.path.abspath(os.path.curdir)
    while not ( os.path.isdir(os.path.join(currentpath, ".accolite")) or currentpath == prevpath ):
        prevpath = currentpath
        currentpath = os.path.abspath(os.path.join(currentpath, os.path.pardir))
    if currentpath == prevpath and not os.path.isdir(os.path.join(currentpath, ".accolite")):
        return ""
    return currentpath


if __name__ == '__main__':
    # Preset options
    cleanbefore = False
    ctestargs = []
    # Get options
    argv = sys.argv[1:]
    while len(argv) > 0 and argv[0].startswith("-"):
        if argv[0] in ["--help","-h"]:
            usage(sys.stdout)
            exit(0)
        elif argv[0] in ["--clean-before","-c"]:
            cleanbefore = True
        elif argv[0] in ["--exclude-tests","-e"]:
            argv = argv[1:]
            ctestargs.append("-E")
            ctestargs.append(argv[0])
        elif argv[0] in ["--only-tests","-o"]:
            argv = argv[1:]
            ctestargs.append("-R")
            ctestargs.append(argv[0])
        else:
            sys.stderr.write("Unknown option " + argv[0] + "!")
            usage(sys.stderr)
        # Shift argument
        argv = argv[1:]

    # Clean before?
    if cleanbefore:
        subprocess.call("accolite-clean")

    # Get working dir
    rootdir = workingdir()
    builddir = os.path.abspath(os.path.join(rootdir, "build"))
    cmakedir = os.path.abspath(os.path.join(rootdir, "cmake"))

    # Launch tests
    ctestargs.insert(0, "-S")
    ctestargs.append(os.path.abspath(os.path.join(cmakedir, "CTestDashboard.cmake")))
    ctestargs.insert(0, "--output-on-failure")
    ctestargs.insert(0, "-V")
    ctestargs.insert(0, "-j" + str(multiprocessing.cpu_count()+1))
    ctestargs.insert(0, "ctest")

    # Compile in debug mode
    if subprocess.call(["accolite-compile","-b","Debug"]) == 0:
        subprocess.Popen(ctestargs, cwd = builddir).wait()

