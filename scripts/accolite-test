#!/usr/bin/env python

import sys
import os.path
import subprocess
import multiprocessing
import accolite

# Usage function
def usage(stream):
    stream.write("Usage: accolite-test [Options]\n")
    stream.write("Options:\n")
    stream.write("--help, -h               : \t This help message.\n")
    stream.write("--clean-before, -c       : \t Run clean-me first.\n")
    stream.write("--exclude-tests, -e <exp>: \t Exclude all tests whose names matchs regular expression <exp>.\n")
    stream.write("--only-test, -o <exp>    : \t Execute only tests whose names matchs regular expression <exp>.\n")

def main():
    # Preset options
    cleanbefore = False
    ctestargs = []
    # Get options
    argv = sys.argv[1:]
    while len(argv) > 0 and argv[0].startswith("-"):
        if argv[0] in ["--help","-h"]:
            usage(sys.stdout)
            return 1
        elif argv[0] in ["--clean-before","-c"]:
            cleanbefore = True
        elif argv[0] in ["--exclude-tests","-e"]:
            argv = argv[1:]
            ctestargs.append("-E")
            ctestargs.append(argv[0])
        elif argv[0] in ["--only-tests","-o"]:
            argv = argv[1:]
            ctestargs.append("-R")
            ctestargs.append(argv[0])
        else:
            sys.stderr.write("Unknown option " + argv[0] + "!")
            usage(sys.stderr)
            return 1
        # Shift argument
        argv = argv[1:]

    # Clean before?
    if cleanbefore:
        subprocess.call(accolite.scriptOfCommand("clean"))

    # Get working dir   
    if accolite.workingDir() == "":
        sys.stderr.write("It seems that you are not in a working accolite project!\n")
        return 1
    builddir = accolite.absdir("build")
    cmakedir = accolite.absdir("cmake")

    # Launch tests
    ctestargs.append("-S")
    ctestargs.append(os.path.abspath(os.path.join(cmakedir, "CTestDashboard.cmake")))
    ctestargs.insert(0, "--output-on-failure")
    ctestargs.insert(0, "-V")
    ctestargs.insert(0, "-j" + str(multiprocessing.cpu_count()+1))
    ctestargs.insert(0, "ctest")

    # Compile in debug mode
    if subprocess.call([accolite.scriptOfCommand("compile"),"-b","Debug"]) == 0:
        return subprocess.Popen(ctestargs, cwd = builddir).wait()
    else:
        return 3


if __name__ == '__main__':
    sys.exit(main())
