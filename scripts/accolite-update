#!/usr/bin/env python

import sys
import os
import accolite

# Usage function
def usage(stream):
    stream.write("Usage: accolite-update [Options] \n")
    stream.write("Options:\n")
    stream.write("--help, -h                  : \t This help message.\n")


def main():
    # Preset options
    # Get options
    argv = sys.argv[1:]
    while len(argv) > 0 and argv[0].startswith("-"):
        if argv[0] in ["--help","-h"]:
            usage(sys.stdout)
            return 0
        else:
            sys.stderr.write("Unknown option " + argv[0] + "!")
            usage(sys.stderr)
            return 1
        # Shift argument
        argv = argv[1:]


    wdir = accolite.workingDir()
    if wdir == "":
        sys.stderr.write("It seems that you are not in a working accolite project!\n")
        return 2
    
    cmakedir = accolite.absdir("cmake")
    testsdir = accolite.absdir("tests")

    # Populating tests dir
    for filename in ["TestRunner.h","ExampleTest.cpp"]:
        filecurr = open(os.path.abspath(os.path.join(testsdir, filename)), 'w')
        filecurr.write(accolite.stringFile(filename))
        filecurr.close()

    # Populating cmakedir
    for filename in ["PathsDefinitions.cmake","CMakeExamplesLists.cmake","CTestConfig.cmake","CTestDashboard.cmake","CMakeLists.txt","CMakeTestsLists.cmake"]:
        filecurr = open(os.path.abspath(os.path.join(cmakedir, filename)), 'w')
        filecurr.write(accolite.stringFile(filename))
        filecurr.close()
    # Treating users files
    for filename in ["valgrind.supp","ExamplesLinks.cmake","TestsLinks.cmake","Dependencies.cmake"]:
        filepath = os.path.abspath(os.path.join(cmakedir, filename))
        if not os.path.isfile(filepath):
            filecurr = open(filepath, 'w')
            filecurr.write(accolite.stringFile(filename))
            filecurr.close()
        

    # Populating modulesdir
    modulesdir = os.path.join(cmakedir,"Modules")
    if not os.path.isdir(modulesdir):
        os.makedirs(modulesdir)
    for filename in ["FindCppUnit.cmake","FindValgrind.cmake","FindPkgMacros.cmake"]:
        filecurr = open(os.path.abspath(os.path.join(modulesdir, filename)), 'w')
        filecurr.write(accolite.stringFile(filename))
        filecurr.close()


if __name__ == '__main__':
    sys.exit(main())
