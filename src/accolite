#!/usr/bin/env python
#
# Copyright (c) 2012 Casati Romain
# All rights reserved.
#
# This file is part of Accolite.
#
# Accolite is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Accolite is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Accolite.  If not, see <http://www.gnu.org/licenses/>


import sys
import os
import posixpath
import subprocess
import string
import accolite
import levenshtein

# The usage function
def usage(ostream):
    ostream.write("Usage: accolite [Options] <command> [<args>]\n\n")
    ostream.write("Options:\n")
    ostream.write("--help, -h             : \t This help message.\n")
    ostream.write("Possible accolite commands are:\n")
    ostream.write("bash-completion\tPrint a tutorial for how to activate bash-completion for accolite\n")
    ostream.write("clean\t\tClean the working project\n")
    ostream.write("cmds\t\tPrint available accolite commands\n")
    ostream.write("compile\t\tCompile the working project\n")
    ostream.write("init\t\tInitialize a new working project\n")
    ostream.write("install-dir\tPrint absolute path to the installation dir of accolite\n")
    ostream.write("root\t\tPrint absolute path to the working accolite directory\n")
    ostream.write("test\t\tRun tests on the working project\n")
    ostream.write("update\t\tUpdate the working project version of accolite\n")


def main():
    # Get options
    argv = sys.argv[1:]
    while len(argv) > 0 and argv[0].startswith("-"):
        if argv[0] in ["--help","-h"]:
            usage(sys.stdout)
            return 0
        else:
            usage(sys.stderr)
            return 1
        # Shift argument
        argv = argv[1:]

    # Check if accolite is called on a command
    if len(argv) == 0:
        usage(sys.stderr)
        return 1

    # Get the command
    command = argv[0]
    accoliteCommands = accolite.availableCommands()
    # Check if the command is valide
    if command not in accoliteCommands:
        sys.stderr.write("accolite: '" + command + "' is not a valid accolite command. See accolite --help.\n")
        sys.stderr.write("Did you mean '" + levenshtein.bestMatch(command, accoliteCommands) + "'?\n")
        return 2

    # Call the corresponding command
    cmdlist = [sys.executable,accolite.scriptOfCommand(argv[0])]
    cmdlist.extend(argv[1:])
    return subprocess.call(cmdlist)


if __name__ == '__main__':
    sys.exit(main())
