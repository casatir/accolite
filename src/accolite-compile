#!/usr/bin/env python
#
# Copyright (c) 2012 Casati Romain
# All rights reserved.
#
# This file is part of Accolite.
#
# Accolite is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Accolite is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Accolite.  If not, see <http://www.gnu.org/licenses/>


import sys
import os
import multiprocessing
import subprocess
import accolite

# Usage function
def usage(stream):
    stream.write("Usage: accolite-compile [Options]\n")
    stream.write("Options:\n")
    stream.write("--help, -h             : \t This help message.\n")
    stream.write("--build-type, -b <type>: \t Specify a build type in Release RelWithDebInfo Debug DebugFull. Default is Release.\n")
    stream.write("--cmake-args, -c <args>: \t Specify arguments to pass to cmake. Default is \"-DCMAKE_BUILD_TYPE=<type-passed-to-b-option>\"\n")
    stream.write("--make-args, -m <args> : \t Specify arguments to pass to make. Default is \"-j<number-of-core+1> install\".\n")


def main():
    # Preset options
    buildtype = "Release"
    cmakeargs = []
    makeargs = []
    # Get options
    argv = sys.argv[1:]
    while len(argv) > 0 and argv[0].startswith("-"):
        if argv[0] in ["--help","-h"]:
            usage(sys.stdout)
            return 0
        elif argv[0] in ["--build-type","-b"]:
            argv = argv[1:]
            buildtype = argv[0]
        elif argv[0] in ["--cmake-args","-c"]:
            argv = argv[1:]
            cmakeargs.append(argv[0])
        elif argv[0] in ["--make-args","-m"]:
            argv = argv[1:]
            makeargs.append(argv[0])
        else:
            sys.stderr.write("Unknown option " + argv[0] + "!")
            usage(sys.stderr)
            return 1
        # Shift argument
        argv = argv[1:]

    # Set build type
    cmakeargs.insert(0,"-DCMAKE_BUILD_TYPE=" + buildtype)
    # Get nbthreads +1
    makeargs.insert(0, "-j" + str(multiprocessing.cpu_count()+1))
    # Install lib
    makeargs.append("install")

    # Get working dir    
    if not accolite.isInsideAccoliteProject():
        sys.stderr.write("It seems that you are not in a working accolite project!\n")
        return 1
    project = accolite.AccoliteProject()
    builddir = project.absDir("build")
    bindir = project.absDir("bin")
    tmpdir = project.absDir("tmp")
    cmakedir = project.absDir("cmake")

    if not os.path.exists(builddir):
        os.makedirs(builddir)
    if not os.path.exists(bindir):
        os.makedirs(bindir)
    if not os.path.exists(tmpdir):
        os.makedirs(tmpdir)

    # Set lasts arguments
    cmakeargs.insert(0, "cmake")
    cmakeargs.append(cmakedir)
    makeargs.insert(0, "make")
    print "Runing cmake inside " + builddir
    try:
        if subprocess.Popen(cmakeargs, cwd=builddir).wait() == 0:
            print "Runing make"
            try:
                return subprocess.Popen(makeargs, cwd=builddir).wait()
            except OSError:
                sys.stderr.write("Error: unable to find make.\n")
                return 5
        else:
            return 3
    except OSError:
        sys.stderr.write("Error: unable to find cmake.\n")
        return 4


if __name__ == '__main__':
    sys.exit(main())
