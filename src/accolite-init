#!/usr/bin/env python
#
# Copyright (c) 2012 Casati Romain
# All rights reserved.
#
# This file is part of Accolite.
#
# Accolite is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Accolite is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Accolite.  If not, see <http://www.gnu.org/licenses/>


import sys
import os
import subprocess
import accolite

# Usage function
def usage(stream):
    stream.write("Usage: accolite-init [Options] <working dir>\n")
    stream.write("Options:\n")
    stream.write("--help, -h                  : \t This help message.\n")
    stream.write("--type, -t <project type>   : \t Specify project type (\"c\" or \"cpp\").\n")
    stream.write("--config-file, -c <xml file>: \t Give a configuration file for initialize the project.\n")


def main():
    # Preset options
    configfile = ""
    projectType = "cpp"
    # Get options
    argv = sys.argv[1:]
    while len(argv) > 0 and argv[0].startswith("-"):
        if argv[0] in ["--help","-h"]:
            usage(sys.stdout)
            return 0
        elif argv[0] in ["--type","-t"]:
            argv = argv[1:]
            projectType = argv[0]
        elif argv[0] in ["--config-file","-c"]:
            argv = argv[1:]
            configfile = argv[0]
        else:
            sys.stderr.write("Unknown option " + argv[0] + "!")
            usage(sys.stderr)
            return 1
        # Shift argument
        argv = argv[1:]

    if len(argv) == 0:
        sys.stderr.write("Mandatory argument <working dir> not found.\n")
        usage(sys.stderr)
        return 2

    # check project type
    if projectType.lower() not in ["cpp", "c"]:
        sys.stderr.write("Project type must be \"c\" or \"cpp\".\n")
        usage(sys.stderr)
        return 3

    # Get working directory
    wDir = os.path.abspath(argv[0])
    # Project name
    projectName = os.path.basename(wDir)
    if not os.path.isdir(wDir):
        os.makedirs(wDir)
    os.chdir(wDir)
    project = accolite.AccoliteProject(projectName, projectType)

    print "Warning: submiting xml not implemented"
    # Put the config file inside .accolite
    #if configfile == "":
    #    configxml = accolite.defaultxml(projectname, projecttype)
    #else:
    #    configxml = parse(configfile)
    #configxmlfile = open(os.path.abspath(os.path.join(accolitedir, "config.xml")), 'w')
    #configxml.writexml(configxmlfile)
    #configxmlfile.close()

    return subprocess.call([accolite.scriptOfCommand("update")])

if __name__ == '__main__':
    sys.exit(main())
