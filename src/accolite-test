#!/usr/bin/env python
#
# Copyright (c) 2012 Casati Romain
# All rights reserved.
#
# This file is part of Accolite.
#
# Accolite is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Accolite is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Accolite.  If not, see <http://www.gnu.org/licenses/>


import sys
import os.path
import subprocess
import multiprocessing
import accolite

# Usage function
def usage(stream):
    stream.write("Usage: accolite-test [Options]\n")
    stream.write("Options:\n")
    stream.write("--help, -h               : \t This help message.\n")
    stream.write("--build-type, -b <exp>   : \t Test in <mode> (default is Debug).\n")
    stream.write("--clean-before, -c       : \t Run clean-me first.\n")
    stream.write("--exclude-tests, -e <exp>: \t Exclude all tests whose names matchs regular expression <exp>.\n")
    stream.write("--only-test, -o <exp>    : \t Execute only tests whose names matchs regular expression <exp>.\n")

def main():
    # Preset options
    cleanbefore = False
    buildtype = "Debug"
    ctestargs = []
    # Get options
    argv = sys.argv[1:]
    while len(argv) > 0 and argv[0].startswith("-"):
        if argv[0] in ["--help","-h"]:
            usage(sys.stdout)
            return 2
        elif argv[0] in ["--build-type","-b"]:
            argv = argv[1:]
            buildtype = argv[0]
        elif argv[0] in ["--clean-before","-c"]:
            cleanbefore = True
        elif argv[0] in ["--exclude-tests","-e"]:
            argv = argv[1:]
            ctestargs.append("-E")
            ctestargs.append(argv[0])
        elif argv[0] in ["--only-tests","-o"]:
            argv = argv[1:]
            ctestargs.append("-R")
            ctestargs.append(argv[0])
        else:
            sys.stderr.write("Unknown option " + argv[0] + "!")
            usage(sys.stderr)
            return 2
        # Shift argument
        argv = argv[1:]

    # Clean before?
    if cleanbefore:
        subprocess.call([sys.executable,accolite.scriptOfCommand("clean")])

    # Get working dir   
    if not accolite.isInsideAccoliteProject():
        sys.stderr.write("It seems that you are not in a working accolite project!\n")
        return 3
    project = accolite.AccoliteProject()
    builddir = project.absDir("build")
    cmakedir = project.absDir("cmake")

    # Launch tests
    ctestargs.append("-S")
    ctestargs.append(os.path.abspath(os.path.join(cmakedir, "CTestDashboard.cmake")))
    ctestargs.insert(0, "--output-on-failure")
    ctestargs.insert(0, "-V")
    ctestargs.insert(0, "-j" + str(multiprocessing.cpu_count()+1))
    ctestargs.insert(0, "ctest")

    # Compile in debug mode
    if subprocess.call([sys.executable,accolite.scriptOfCommand("compile"),"-b",buildtype]) == 0:
        # Check for valgrind
        try:
            subprocess.Popen("valgrind",stderr=subprocess.STDOUT,\
                             stdout=subprocess.PIPE).wait()
        except OSError:
            sys.stderr.write("Error: unable to find valgrind.\n")
            return 4
        if subprocess.call([sys.executable,accolite.scriptOfCommand("pretest")]) != 0:
            return 5
        if subprocess.Popen(ctestargs, cwd = builddir).wait() == 0:
            return subprocess.call([sys.executable,accolite.scriptOfCommand("posttest")])
        return -1
    else:
        return 6


if __name__ == '__main__':
    sys.exit(main())
